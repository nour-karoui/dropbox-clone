{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadBlockchainData","loadWeb3","ethereum","web3","Web3","enable","currentProvider","alert","providers","HttpProvider","console","log","setState","account","eth","accounts","privateKeyToAccount","localStorage","setItem","privateKey","address","net","getId","networkId","networkData","DStorage","networks","dstorage","Contract","abi","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","super","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","this","buffer","Buffer","result","type","name","uploadFile","description","add","error","size","uploadFileFunction","hash","functionAbi","encodeABI","estimateGas","from","gasAmount","toString","getTransactionCount","_nonce","nonce","txParams","gasPrice","gasLimit","to","data","tx","Tx","sign","serializedTx","serialize","sendSignedTransaction","on","receipt","loading","id","className","Navbar","href","rel","src","box","width","height","alt","substring","Identicon","module","exports","Main","role","style","maxWidth","onSubmit","fileDescription","value","ref","input","placeholder","required","onChange","maxHeight","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"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","file":"static/js/main.1bd86a3e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import DStorage from './abis/DStorage.json'\r\nimport React, { Component } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3'\r\nimport Tx from 'ethereumjs-tx'\r\nimport './App.css';\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({\r\n  host: 'ipfs.infura.io',\r\n  port: 5001,\r\n  protocol: 'https'\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    // await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if(window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if(window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non Ethereum browser detected, you should consider trying metamask')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    //Declare Web3\r\n    const web3 = new Web3(new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/aff0fe260d2b4c4f8aca7d426d1b90f8'))\r\n    console.log(web3)\r\n    this.setState({web3})\r\n    //Load account\r\n\r\n    //const accounts = await web3.eth.getAccounts();\r\n    const account = web3.eth.accounts.privateKeyToAccount('b63e3f7051cf1226b82d844f1ac8b02ec7f03c2eb176d2d1f2df46a6a4836584');\r\n    console.log(account)\r\n    localStorage.setItem('privateKey', account.privateKey)\r\n    this.setState({account: account.address})\r\n\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = DStorage.networks[networkId]\r\n    if(networkData) {\r\n      // Assign contract\r\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\r\n      this.setState({ dstorage })\r\n      // Get files amount\r\n      const filesCount = await dstorage.methods.fileCount().call()\r\n      this.setState({ filesCount })\r\n      // Load files & sort by the newest\r\n\r\n      for (let i = filesCount; i >= 1; i--) {\r\n        const file = await dstorage.methods.files(i).call()\r\n        this.setState({\r\n          files: [...this.state.files, file]\r\n        })\r\n      }\r\n    } else {\r\n      window.alert('DStorage contract not deployed to detected network.')\r\n    }\r\n\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = event => {\r\n    event.preventDefault()\r\n\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name\r\n      })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  //Upload File\r\n  uploadFile = description => {\r\n    console.log('submitting file to ipfs')\r\n    //Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('IPFS RESULT', result)\r\n      console.log('IPFS RESULT', result.size)\r\n      //Check If error\r\n      //Return error\r\n\r\n      if(error) {\r\n        console.log(error)\r\n        return\r\n      }\r\n      //Set state to loading\r\n\r\n      //Assign value for the file without extension\r\n      if(this.state.type === '') {\r\n        this.setState({type: 'none'})\r\n      }\r\n\r\n      //Call smart contract uploadFile function\r\n      const uploadFileFunction = this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description)\r\n      const functionAbi = uploadFileFunction.encodeABI()\r\n      console.log('getting gas estimate ', functionAbi)\r\n\r\n      uploadFileFunction.estimateGas({from: this.state.account}).then(gasAmount => {\r\n        gasAmount = gasAmount.toString(16);\r\n\r\n        console.log(\"Estimated gas: \" + gasAmount);\r\n\r\n        this.state.web3.eth.getTransactionCount(this.state.account).then(_nonce => { //this will generate Nonce\r\n          const nonce = _nonce.toString(16);\r\n\r\n          console.log(\"Nonce: \" + nonce);\r\n          const txParams = {\r\n            gasPrice: gasAmount,\r\n            gasLimit: 3000000,\r\n            to: \"0xC59EE3B70C9816AEFA0dE9C523063a41d855f53B\",\r\n            data: functionAbi,\r\n            from: this.state.account,\r\n            nonce: '0x' + nonce\r\n          };\r\n\r\n          const tx = new Tx(txParams);\r\n          tx.sign(Buffer.from('b63e3f7051cf1226b82d844f1ac8b02ec7f03c2eb176d2d1f2df46a6a4836584', 'hex'));          // here Tx sign with private key\r\n\r\n          const serializedTx = tx.serialize();\r\n\r\n          // here performing singedTransaction\r\n          this.state.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', receipt => {\r\n            console.log(receipt);\r\n          })\r\n        });\r\n      })\r\n      // this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description)\r\n      //     .send({ from: this.state.account })\r\n      //     .on('transactionHash', (hash) => {\r\n      //       this.setState({\r\n      //         loading: false,\r\n      //         type: null,\r\n      //         name: null\r\n      //       })\r\n      //       window.location.reload()\r\n      //     })\r\n      //     .on('error', (e) =>{\r\n      //       window.alert('Error')\r\n      //       console.log(e)\r\n      //       this.setState({loading: false})\r\n      //     })\r\n    })\r\n\r\n\r\n  }\r\n\r\n  //Set states\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      files: []\r\n    }\r\n\r\n    //Bind functions\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              files={this.state.files}\r\n              captureFile={this.captureFile}\r\n              uploadFile={this.uploadFile}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport box from '../box.png'\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          D$t0r@g3\r\n        </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n              <li>\r\n                  <small id=\"account\">\r\n                      <a target=\"_blank\"\r\n                         alt=\"\"\r\n                         className=\"text-white\"\r\n                         rel=\"noopener noreferrer\"\r\n                         href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                          {this.props.account?.substring(0,6)}...{this.props.account?.substring(38,42)}\r\n                      </a>\r\n                  </small>\r\n                  { this.props.account\r\n                      ? <img\r\n                          alt=\"\"\r\n                          className='ml-2'\r\n                          width='30'\r\n                          height='30'\r\n                          src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n                      />\r\n                      : <span></span>\r\n                  }\r\n              </li>\r\n          </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\r\nimport { convertBytes } from './helpers';\r\nimport moment from 'moment'\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5 text-center\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\r\n            <div className=\"content\">\r\n              <p>&nbsp;</p>\r\n              <div className=\"card mb-3 mx-auto bg-dark\" style={{ maxWidth: '512px' }}>\r\n                <h2 className=\"text-white text-monospace bg-dark\"><b><ins>Share File</ins></b></h2>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const description = this.fileDescription.value\r\n                  this.props.uploadFile(description)\r\n                }} >\r\n                  <div className=\"form-group\">\r\n                    <br></br>\r\n                    <input\r\n                        id=\"fileDescription\"\r\n                        type=\"text\"\r\n                        ref={(input) => { this.fileDescription = input }}\r\n                        className=\"form-control text-monospace\"\r\n                        placeholder=\"description...\"\r\n                        required />\r\n                  </div>\r\n                  <input type=\"file\" onChange={this.props.captureFile} className=\"text-white text-monospace\"/>\r\n                  <button type=\"submit\" className=\"btn-primary btn-block\"><b>Upload!</b></button>\r\n                </form>\r\n              </div>\r\n              <p>&nbsp;</p>\r\n              {/* Create Table*/}\r\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\r\n                <thead style={{ 'fontSize': '15px' }}>\r\n                <tr className=\"bg-dark text-white\">\r\n                  <th scope=\"col\" style={{ width: '10px'}}>id</th>\r\n                  <th scope=\"col\" style={{ width: '200px'}}>name</th>\r\n                  <th scope=\"col\" style={{ width: '230px'}}>description</th>\r\n                  <th scope=\"col\" style={{ width: '120px'}}>type</th>\r\n                  <th scope=\"col\" style={{ width: '90px'}}>size</th>\r\n                  <th scope=\"col\" style={{ width: '90px'}}>date</th>\r\n                  <th scope=\"col\" style={{ width: '120px'}}>uploader/view</th>\r\n                  <th scope=\"col\" style={{ width: '120px'}}>hash/view/get</th>\r\n                </tr>\r\n                </thead>\r\n                { this.props.files.map((file, key) => {\r\n                  return(\r\n                      <thead style={{ 'fontSize': '12px' }} key={key}>\r\n                      <tr>\r\n                        <td>{file.fileId}</td>\r\n                        <td>{file.fileName}</td>\r\n                        <td>{file.fileDescription}</td>\r\n                        <td>{file.fileType}</td>\r\n                        <td>{convertBytes(file.fileSize)}</td>\r\n                        <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\r\n                        <td>\r\n                          <a\r\n                              href={\"https://etherscan.io/address/\" + file.uploader}\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\">\r\n                            {file.uploader.substring(0,10)}...\r\n                          </a>\r\n                        </td>\r\n                        <td>\r\n                          <a\r\n                              href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\">\r\n                            {file.fileHash.substring(0,10)}...\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                      </thead>\r\n                  )\r\n                })}\r\n              </table>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}